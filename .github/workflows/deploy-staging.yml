name: Deploy to Staging

on:
  workflow_run:
    workflows: ["ci"]
    types:
      - completed
    branches: [main]

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          token: ${{ secrets.PAT_TOKEN || github.token }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create environment files
        run: |
          cd /opt/mars-abnormal-finding
          mkdir -p backend frontend
          # Create backend .env.development
          cat > backend/.env.development << EOF
          NODE_ENV=development
          DB_PORT=${{ secrets.STAGING_DB_PORT }}
          DB_NAME=${{ secrets.STAGING_DB_NAME }}
          DB_PORT=${{ secrets.STAGING_DB_PORT }}
          DB_SERVER=${{ secrets.STAGING_DB_SERVER }}
          DB_USER=${{ secrets.STAGING_DB_USER }}
          DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
          JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
          FRONTEND_URL=${{ secrets.STAGING_FRONTEND_URL }}
          LINE_CHANNEL_ACCESS_TOKEN=${{ secrets.STAGING_LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_CHANNEL_SECRET=${{ secrets.STAGING_LINE_CHANNEL_SECRET }}
          RESEND_API_TOKEN=${{ secrets.STAGING_RESEND_API_TOKEN }}
          EOF
          
          # Create frontend .env.development
          cat > frontend/.env.development << EOF
          VITE_API_URL=${{ secrets.STAGING_VITE_API_URL }}
          VITE_LIFF_ID=${{ secrets.STAGING_VITE_LIFF_ID }}
          VITE_ENVIRONMENT=staging
          EOF

      - name: Pull latest images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.OWNER }}/frontend:sha-${{ github.event.workflow_run.head_sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.OWNER }}/backend:sha-${{ github.event.workflow_run.head_sha }}

      - name: Stop existing containers
        run: |
          docker compose down || true

      - name: Deploy to staging
        run: |
          # Set environment variables for staging deployment
          export FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.OWNER }}/frontend:sha-${{ github.event.workflow_run.head_sha }}
          export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.OWNER }}/backend:sha-${{ github.event.workflow_run.head_sha }}
          
          # Deploy using docker compose with development environment
          cd /opt/mars-abnormal-finding
          docker compose up -d
          
          # Wait a moment for containers to start
          sleep 10
          
          # Verify the frontend is using the correct API URL
          echo "Checking frontend API configuration..."
          docker compose exec frontend printenv | grep VITE_API_URL || echo "VITE_API_URL not found in runtime env"

      - name: Verify deployment
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if containers are running
          cd /opt/mars-abnormal-finding
          docker compose ps
          
          # Basic health check
          if docker compose -f docker-compose.yml ps | grep -q "Up"; then
            echo "✅ Deployment successful - services are running"
          else
            echo "❌ Deployment failed - some services are not running"
            docker compose logs
            exit 1
          fi

      - name: Clean up old images
        run: |
          # Remove old images to save space (keep last 3 versions)
          docker images ${{ env.REGISTRY }}/${{ env.OWNER }}/frontend --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || true
          docker images ${{ env.REGISTRY }}/${{ env.OWNER }}/backend --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || true

      - name: Clean up environment files
        run: |
          # Remove sensitive files after deployment
          rm -f backend/.env.development frontend/.env.development